{"version":3,"sources":["header.js","card.js","top-card-list.js","card-small.js","overview.js","switch.js","App.js","serviceWorker.js","index.js"],"names":["Header","children","className","Card","username","followers","todayFollowers","icon","name","cardClass","src","alt","cardListData","id","TopCardList","map","cardData","key","CardSmall","pageViews","growth","cardSmallList","Overview","Switch","onChange","document","body","classList","toggle","type","htmlFor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fa7bde8d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './header.css'\r\n\r\nexport default function Header({ children }) {\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"wrapper\">\r\n                <div className=\"header-grid\">\r\n                    <div>\r\n                        <h1>Social Media Dashboard</h1>\r\n                        <p className=\"header-total\">Total Followers: 23, 004</p>\r\n                    </div>\r\n                    { children }\r\n                </div>\r\n            </div>\r\n        </header> \r\n    )\r\n}","import React from 'react';\r\n\r\nimport './card.css';\r\n\r\nexport default function Card({ username, followers, todayFollowers, icon, name }) {\r\n    const cardClass = `card ${name}`;\r\n    return (\r\n        <article className={cardClass}>\r\n            <p className=\"card-title\">\r\n                <img src={ icon } alt=\"\"/>\r\n                { username }\r\n            </p> \r\n            <p className=\"card-followers\">\r\n                <span className=\"card-followers-number\">{ followers }</span>\r\n                <span className=\"card-followers-title\">Followers</span>\r\n            </p>\r\n            <p className=\"card-today\">\r\n                <img src=\"images/icon-up.svg\" alt=\"\"/>\r\n                { todayFollowers } Today\r\n            </p>\r\n        </article>\r\n\r\n    );\r\n}","import React from 'react';\r\n\r\nimport Card from './card';\r\n\r\nimport './top-card-list.css';\r\n\r\nconst cardListData = [\r\n    { \r\n        username: '@tonikin3',\r\n        id: 1,\r\n        followers: '1592',\r\n        todayFollowers: 12,\r\n        icon: 'images/icon-facebook.svg',\r\n        name: 'facebook'\r\n    },\r\n    { \r\n        username: '@tonikin3',\r\n        id: 2,\r\n        followers: '28k',\r\n        todayFollowers: 25,\r\n        icon: 'images/icon-twitter.svg',\r\n        name: 'twitter'\r\n    },\r\n    { \r\n        username: '@tonikin3',\r\n        id: 3,\r\n        followers: '6k',\r\n        todayFollowers: 34,\r\n        icon: 'images/icon-instagram.svg',\r\n        name: 'instagram'\r\n    },\r\n    { \r\n        username: '@tonikin3',\r\n        id: 4,\r\n        followers: '12k',\r\n        todayFollowers: -50,\r\n        icon: 'images/icon-youtube.svg',\r\n        name: 'youtube'\r\n    }\r\n];\r\n\r\nexport default function TopCardList() {\r\n    return (\r\n        <section className=\"top-cards\">\r\n            <div className=\"wrapper\">\r\n                <div className=\"grid\">\r\n                    {\r\n                        cardListData.map((cardData) => {\r\n                            return <Card key={cardData.id} {...cardData} />\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport './card-small.css'\r\n\r\nexport default function CardSmall({ icon, pageViews, growth }) {\r\n    return (\r\n        <div className=\"card-small\">\r\n            <p className=\"card-small-views\">Page Views</p>\r\n            <p className=\"card-small-icon\">\r\n                <img src={ icon } alt=\"\"/>\r\n            </p>\r\n            <p className=\"card-small-number\">{ pageViews }</p>\r\n            <p className=\"card-small-percentage\">\r\n                <span>\r\n                    <img src=\"images/icon-up.svg\" alt=\"\"/>\r\n                    { growth }%\r\n                </span>\r\n            </p>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nimport CardSmall from \"./card-small\";\r\n\r\nimport './overview.css';\r\n\r\nconst cardSmallList = [\r\n    {\r\n        icon: 'images/icon-facebook.svg',\r\n        pageViews: '87',\r\n        growth: 2,\r\n        id: 1\r\n    },\r\n    {\r\n        icon: 'images/icon-twitter.svg',\r\n        pageViews: '52',\r\n        growth: 2257,\r\n        id: 2\r\n    },\r\n    {\r\n        icon: 'images/icon-instagram.svg',\r\n        pageViews: '5462',\r\n        growth: 1375,\r\n        id: 3\r\n    },\r\n    {\r\n        icon: 'images/icon-youtube.svg',\r\n        pageViews: '117',\r\n        growth: 303,\r\n        id: 4\r\n    }\r\n];\r\n\r\nfunction Overview() {\r\n    return (\r\n        <section className=\"overview\">\r\n            <div className=\"wrapper\">\r\n                <h2>Overview - Today</h2>\r\n\r\n                <div className=\"grid\">\r\n                {\r\n                    cardSmallList.map(({ icon, pageViews, growth, id }) => {\r\n                        return <CardSmall\r\n                            icon={icon}\r\n                            pageViews={pageViews}\r\n                            growth={growth}\r\n                            key={id}\r\n                        />\r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n        </section>\r\n\r\n    );\r\n}\r\n\r\nexport default Overview;","import React from 'react';\r\n\r\nimport './switch.css'\r\n\r\nexport default function Switch() {\r\n    function handleChange() {\r\n        document.body.classList.toggle('is-dark-mode');\r\n    }\r\n    return (\r\n        <div className=\"dark-mode\">\r\n            <p className=\"dark-mode-title\">Dark Mode</p>\r\n            <input onChange={ handleChange } type=\"checkbox\" className=\"checkbox\" id=\"checkbox\"/>\r\n            <label className=\"switch\" htmlFor=\"checkbox\"></label>\r\n        </div>     \r\n    );\r\n}","import React, { Fragment } from 'react';\nimport './globals.css';\n\nimport Header from './header';\nimport TopCardList from './top-card-list';\nimport Overview from './overview';\nimport Switch from './switch';\n\nfunction App() {\n  return (\n    <Fragment>\n      <Header>\n        <Switch />\n      </Header>\n      <TopCardList />\n      <Overview />\n    </Fragment>\n  );\n}         \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}